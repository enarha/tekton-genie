apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: fixed-pipelinerun-example
spec:
  # Correct: 'workspaces' is under 'spec'
  workspaces:
    - name: shared-workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 512Mi
  # Correct: 'params' is the correct field name, with only name/value
  params:
    - name: git-url
      value: "https://github.com/savitaashture/pac-demo"
    - name: image-url
      value: "docker.io/my-user/my-app"

  # Correct: 'pipelineSpec' is the correct field name
  pipelineSpec:
    description: "This pipeline clones, tests, and builds a repo."
    # Correct: Pipeline-level params must be declared with type
    params:
      - name: git-url
        type: string
      - name: image-url
        type: string
    # Correct: Pipeline-level workspaces must be declared
    workspaces:
      - name: shared-workspace
    tasks:
      - name: clone-repository
        # Correct: 'taskSpec' is the correct field name
        taskSpec:
          # Correct: Task-level workspaces must be declared
          workspaces:
            - name: source
          # Correct: Task-level params must be declared with type
          params:
            - name: git-url
              type: string
          # Correct: 'steps' is the correct field name
          steps:
            - name: git-clone
              image: alpine/git:latest
              workingDir: $(workspaces.source.path)
              # Correct: v1 parameter reference syntax
              script: |
                git clone $(params.git-url) .
        # Correct: Passing pipeline-level param to the task
        params:
          - name: git-url
            value: $(params.git-url)
        # Correct: Mapping pipeline workspace to task workspace
        workspaces:
          - name: source
            workspace: shared-workspace

      - name: run-tests
        runAfter: [clone-repository]
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: go-test
              image: golang:1.20-alpine
              # Correct: 'workingDir' is a sibling of 'script'
              workingDir: $(workspaces.source.path)/go-app
              script: |
                go test ./...
        workspaces:
          - name: source
            workspace: shared-workspace

      - name: build-and-push-image
        runAfter: [run-tests]
        # Correct: 'resources' field is removed for v1
        taskSpec:
          params:
            - name: IMAGE_URL
              type: string
          workspaces:
            - name: source
          steps:
            - name: build-push
              image: quay.io/buildah/buildah:v1.28.0
              workingDir: $(workspaces.source.path)/go-app
              # Correct: 'script' is used for multi-line commands
              script: |
                buildah bud --tls-verify=false -t $(params.IMAGE_URL) -f Dockerfile .
                buildah push --tls-verify=false $(params.IMAGE_URL) docker://$(params.IMAGE_URL)
              # Correct: 'securityContext' is at the step level
              securityContext:
                privileged: true
        # Correct: Passing pipeline-level param to the task
        params:
          - name: IMAGE_URL
            value: $(params.image-url)
        workspaces:
          - name: source
            workspace: shared-workspace
    # Correct: 'onFailure' is replaced by 'finally' for cleanup/notification tasks
    finally:
      - name: notify-on-status
        # 'when' can be used to conditionally run based on pipeline status
        when:
          - input: "$(tasks.status)"
            operator: in
            values: ["Failed"]
        taskSpec:
          steps:
            - name: send-slack-notification
              image: curlimages/curl # Example image
              script: |
                echo "Pipeline run has failed! Status: $(tasks.status)"
                # Add real notification logic here